# NOTE : $VARIABLES are env variables replaced by entrypoint.sh using envsubst
# not to be mistaken for nginx variables (also starting with $, but usually lowercase)

worker_processes auto;

error_log  /var/log/nginx/error.log notice;
pid        /tmp/nginx.pid;

events {

}

http {
    proxy_temp_path /tmp/proxy_temp;
    client_body_temp_path /tmp/client_temp;
    fastcgi_temp_path /tmp/fastcgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    scgi_temp_path /tmp/scgi_temp;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    server_names_hash_bucket_size  128;

    # Allow Nginx to resolve Docker host names (see https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/)
    resolver $RESOLVER; # it seems rancher uses 169.254.169.250 instead of 127.0.0.11 which works well in docker-compose (see /etc/resolv.conf)

    # https - listens on specific name - this uses letsencrypt cert
    # this includes a symlink that links either to nginx.https.available.conf if https in enabled
    # or to an empty file if https is disabled.
    include https/nginx.https.enabled.conf;

    # http - listens to specific HTTP_HOST only - this is not encrypted (not ideal but admissible on LAN for instance)
    # even if not used (HTTP_HOST empty), we must keep it as it's used for internal API calls between django and geoserver
    # TODO : do not use unencrypted connection even on LAN, but is it possible to have browser not complaining about unknown authority ?
    server {
        listen              8080;
        server_name         $HTTP_HOST 127.0.0.1;

        include sites-enabled/*.conf;
    }

    # Default server closes the connection (we can connect only using HTTP_HOST and HTTPS_HOST)
    server {
        listen          8080 default_server;
        listen          8443;
        server_name     _;
        return          444;
    }

}
